// Code generated by MockGen. DO NOT EDIT.
// Source: dhcp.go

// Package mock is a generated GoMock package.
package mock

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetAddressWithMAC mocks base method.
func (m *MockStorage) GetAddressWithMAC(arg0 net.HardwareAddr) net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressWithMAC", arg0)
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// GetAddressWithMAC indicates an expected call of GetAddressWithMAC.
func (mr *MockStorageMockRecorder) GetAddressWithMAC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressWithMAC", reflect.TypeOf((*MockStorage)(nil).GetAddressWithMAC), arg0)
}

// GetLastAddress mocks base method.
func (m *MockStorage) GetLastAddress() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAddress")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// GetLastAddress indicates an expected call of GetLastAddress.
func (mr *MockStorageMockRecorder) GetLastAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAddress", reflect.TypeOf((*MockStorage)(nil).GetLastAddress))
}

// GetOneUnusedAddress mocks base method.
func (m *MockStorage) GetOneUnusedAddress() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneUnusedAddress")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// GetOneUnusedAddress indicates an expected call of GetOneUnusedAddress.
func (mr *MockStorageMockRecorder) GetOneUnusedAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUnusedAddress", reflect.TypeOf((*MockStorage)(nil).GetOneUnusedAddress))
}

// ReleaseAddress mocks base method.
func (m *MockStorage) ReleaseAddress(arg0 net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseAddress indicates an expected call of ReleaseAddress.
func (mr *MockStorageMockRecorder) ReleaseAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAddress", reflect.TypeOf((*MockStorage)(nil).ReleaseAddress), arg0)
}

// SetAddressWithMAC mocks base method.
func (m *MockStorage) SetAddressWithMAC(arg0 net.IP, arg1 net.HardwareAddr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAddressWithMAC", arg0, arg1)
}

// SetAddressWithMAC indicates an expected call of SetAddressWithMAC.
func (mr *MockStorageMockRecorder) SetAddressWithMAC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddressWithMAC", reflect.TypeOf((*MockStorage)(nil).SetAddressWithMAC), arg0, arg1)
}
